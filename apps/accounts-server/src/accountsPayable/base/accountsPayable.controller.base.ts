/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AccountsPayableService } from "../accountsPayable.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccountsPayableCreateInput } from "./AccountsPayableCreateInput";
import { AccountsPayable } from "./AccountsPayable";
import { AccountsPayableFindManyArgs } from "./AccountsPayableFindManyArgs";
import { AccountsPayableWhereUniqueInput } from "./AccountsPayableWhereUniqueInput";
import { AccountsPayableUpdateInput } from "./AccountsPayableUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AccountsPayableControllerBase {
  constructor(
    protected readonly service: AccountsPayableService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccountsPayable })
  @nestAccessControl.UseRoles({
    resource: "AccountsPayable",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AccountsPayableCreateInput,
  })
  async createAccountsPayable(
    @common.Body() data: AccountsPayableCreateInput
  ): Promise<AccountsPayable> {
    return await this.service.createAccountsPayable({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        dueDate: true,
        id: true,
        status: true,
        updatedAt: true,
        vendorId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AccountsPayable] })
  @ApiNestedQuery(AccountsPayableFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccountsPayable",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accountsPayables(
    @common.Req() request: Request
  ): Promise<AccountsPayable[]> {
    const args = plainToClass(AccountsPayableFindManyArgs, request.query);
    return this.service.accountsPayables({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        dueDate: true,
        id: true,
        status: true,
        updatedAt: true,
        vendorId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccountsPayable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccountsPayable",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accountsPayable(
    @common.Param() params: AccountsPayableWhereUniqueInput
  ): Promise<AccountsPayable | null> {
    const result = await this.service.accountsPayable({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        dueDate: true,
        id: true,
        status: true,
        updatedAt: true,
        vendorId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccountsPayable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccountsPayable",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AccountsPayableUpdateInput,
  })
  async updateAccountsPayable(
    @common.Param() params: AccountsPayableWhereUniqueInput,
    @common.Body() data: AccountsPayableUpdateInput
  ): Promise<AccountsPayable | null> {
    try {
      return await this.service.updateAccountsPayable({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          dueDate: true,
          id: true,
          status: true,
          updatedAt: true,
          vendorId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccountsPayable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccountsPayable",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAccountsPayable(
    @common.Param() params: AccountsPayableWhereUniqueInput
  ): Promise<AccountsPayable | null> {
    try {
      return await this.service.deleteAccountsPayable({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          dueDate: true,
          id: true,
          status: true,
          updatedAt: true,
          vendorId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
