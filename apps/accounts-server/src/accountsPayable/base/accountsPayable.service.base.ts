/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccountsPayable as PrismaAccountsPayable,
} from "@prisma/client";

export class AccountsPayableServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountsPayableCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountsPayable.count(args);
  }

  async accountsPayables(
    args: Prisma.AccountsPayableFindManyArgs
  ): Promise<PrismaAccountsPayable[]> {
    return this.prisma.accountsPayable.findMany(args);
  }
  async accountsPayable(
    args: Prisma.AccountsPayableFindUniqueArgs
  ): Promise<PrismaAccountsPayable | null> {
    return this.prisma.accountsPayable.findUnique(args);
  }
  async createAccountsPayable(
    args: Prisma.AccountsPayableCreateArgs
  ): Promise<PrismaAccountsPayable> {
    return this.prisma.accountsPayable.create(args);
  }
  async updateAccountsPayable(
    args: Prisma.AccountsPayableUpdateArgs
  ): Promise<PrismaAccountsPayable> {
    return this.prisma.accountsPayable.update(args);
  }
  async deleteAccountsPayable(
    args: Prisma.AccountsPayableDeleteArgs
  ): Promise<PrismaAccountsPayable> {
    return this.prisma.accountsPayable.delete(args);
  }
}
