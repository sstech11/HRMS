/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccountsReceivable } from "./AccountsReceivable";
import { AccountsReceivableCountArgs } from "./AccountsReceivableCountArgs";
import { AccountsReceivableFindManyArgs } from "./AccountsReceivableFindManyArgs";
import { AccountsReceivableFindUniqueArgs } from "./AccountsReceivableFindUniqueArgs";
import { CreateAccountsReceivableArgs } from "./CreateAccountsReceivableArgs";
import { UpdateAccountsReceivableArgs } from "./UpdateAccountsReceivableArgs";
import { DeleteAccountsReceivableArgs } from "./DeleteAccountsReceivableArgs";
import { AccountsReceivableService } from "../accountsReceivable.service";
@graphql.Resolver(() => AccountsReceivable)
export class AccountsReceivableResolverBase {
  constructor(protected readonly service: AccountsReceivableService) {}

  async _accountsReceivablesMeta(
    @graphql.Args() args: AccountsReceivableCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccountsReceivable])
  async accountsReceivables(
    @graphql.Args() args: AccountsReceivableFindManyArgs
  ): Promise<AccountsReceivable[]> {
    return this.service.accountsReceivables(args);
  }

  @graphql.Query(() => AccountsReceivable, { nullable: true })
  async accountsReceivable(
    @graphql.Args() args: AccountsReceivableFindUniqueArgs
  ): Promise<AccountsReceivable | null> {
    const result = await this.service.accountsReceivable(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccountsReceivable)
  async createAccountsReceivable(
    @graphql.Args() args: CreateAccountsReceivableArgs
  ): Promise<AccountsReceivable> {
    return await this.service.createAccountsReceivable({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AccountsReceivable)
  async updateAccountsReceivable(
    @graphql.Args() args: UpdateAccountsReceivableArgs
  ): Promise<AccountsReceivable | null> {
    try {
      return await this.service.updateAccountsReceivable({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountsReceivable)
  async deleteAccountsReceivable(
    @graphql.Args() args: DeleteAccountsReceivableArgs
  ): Promise<AccountsReceivable | null> {
    try {
      return await this.service.deleteAccountsReceivable(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
