/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Budget } from "./Budget";
import { BudgetCountArgs } from "./BudgetCountArgs";
import { BudgetFindManyArgs } from "./BudgetFindManyArgs";
import { BudgetFindUniqueArgs } from "./BudgetFindUniqueArgs";
import { CreateBudgetArgs } from "./CreateBudgetArgs";
import { UpdateBudgetArgs } from "./UpdateBudgetArgs";
import { DeleteBudgetArgs } from "./DeleteBudgetArgs";
import { BudgetService } from "../budget.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Budget)
export class BudgetResolverBase {
  constructor(
    protected readonly service: BudgetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Budget",
    action: "read",
    possession: "any",
  })
  async _budgetsMeta(
    @graphql.Args() args: BudgetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Budget])
  @nestAccessControl.UseRoles({
    resource: "Budget",
    action: "read",
    possession: "any",
  })
  async budgets(@graphql.Args() args: BudgetFindManyArgs): Promise<Budget[]> {
    return this.service.budgets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Budget, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Budget",
    action: "read",
    possession: "own",
  })
  async budget(
    @graphql.Args() args: BudgetFindUniqueArgs
  ): Promise<Budget | null> {
    const result = await this.service.budget(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Budget)
  @nestAccessControl.UseRoles({
    resource: "Budget",
    action: "create",
    possession: "any",
  })
  async createBudget(@graphql.Args() args: CreateBudgetArgs): Promise<Budget> {
    return await this.service.createBudget({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Budget)
  @nestAccessControl.UseRoles({
    resource: "Budget",
    action: "update",
    possession: "any",
  })
  async updateBudget(
    @graphql.Args() args: UpdateBudgetArgs
  ): Promise<Budget | null> {
    try {
      return await this.service.updateBudget({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Budget)
  @nestAccessControl.UseRoles({
    resource: "Budget",
    action: "delete",
    possession: "any",
  })
  async deleteBudget(
    @graphql.Args() args: DeleteBudgetArgs
  ): Promise<Budget | null> {
    try {
      return await this.service.deleteBudget(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
