/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Compliance as PrismaCompliance } from "@prisma/client";

export class ComplianceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComplianceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.compliance.count(args);
  }

  async compliances(
    args: Prisma.ComplianceFindManyArgs
  ): Promise<PrismaCompliance[]> {
    return this.prisma.compliance.findMany(args);
  }
  async compliance(
    args: Prisma.ComplianceFindUniqueArgs
  ): Promise<PrismaCompliance | null> {
    return this.prisma.compliance.findUnique(args);
  }
  async createCompliance(
    args: Prisma.ComplianceCreateArgs
  ): Promise<PrismaCompliance> {
    return this.prisma.compliance.create(args);
  }
  async updateCompliance(
    args: Prisma.ComplianceUpdateArgs
  ): Promise<PrismaCompliance> {
    return this.prisma.compliance.update(args);
  }
  async deleteCompliance(
    args: Prisma.ComplianceDeleteArgs
  ): Promise<PrismaCompliance> {
    return this.prisma.compliance.delete(args);
  }
}
