/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FixedAssetService } from "../fixedAsset.service";
import { FixedAssetCreateInput } from "./FixedAssetCreateInput";
import { FixedAsset } from "./FixedAsset";
import { FixedAssetFindManyArgs } from "./FixedAssetFindManyArgs";
import { FixedAssetWhereUniqueInput } from "./FixedAssetWhereUniqueInput";
import { FixedAssetUpdateInput } from "./FixedAssetUpdateInput";

export class FixedAssetControllerBase {
  constructor(protected readonly service: FixedAssetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FixedAsset })
  async createFixedAsset(
    @common.Body() data: FixedAssetCreateInput
  ): Promise<FixedAsset> {
    return await this.service.createFixedAsset({
      data: data,
      select: {
        assetName: true,
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FixedAsset] })
  @ApiNestedQuery(FixedAssetFindManyArgs)
  async fixedAssets(@common.Req() request: Request): Promise<FixedAsset[]> {
    const args = plainToClass(FixedAssetFindManyArgs, request.query);
    return this.service.fixedAssets({
      ...args,
      select: {
        assetName: true,
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FixedAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fixedAsset(
    @common.Param() params: FixedAssetWhereUniqueInput
  ): Promise<FixedAsset | null> {
    const result = await this.service.fixedAsset({
      where: params,
      select: {
        assetName: true,
        createdAt: true,
        description: true,
        id: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FixedAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFixedAsset(
    @common.Param() params: FixedAssetWhereUniqueInput,
    @common.Body() data: FixedAssetUpdateInput
  ): Promise<FixedAsset | null> {
    try {
      return await this.service.updateFixedAsset({
        where: params,
        data: data,
        select: {
          assetName: true,
          createdAt: true,
          description: true,
          id: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FixedAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFixedAsset(
    @common.Param() params: FixedAssetWhereUniqueInput
  ): Promise<FixedAsset | null> {
    try {
      return await this.service.deleteFixedAsset({
        where: params,
        select: {
          assetName: true,
          createdAt: true,
          description: true,
          id: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
