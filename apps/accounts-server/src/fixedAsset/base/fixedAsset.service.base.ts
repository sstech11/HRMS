/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FixedAsset as PrismaFixedAsset } from "@prisma/client";

export class FixedAssetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FixedAssetCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fixedAsset.count(args);
  }

  async fixedAssets(
    args: Prisma.FixedAssetFindManyArgs
  ): Promise<PrismaFixedAsset[]> {
    return this.prisma.fixedAsset.findMany(args);
  }
  async fixedAsset(
    args: Prisma.FixedAssetFindUniqueArgs
  ): Promise<PrismaFixedAsset | null> {
    return this.prisma.fixedAsset.findUnique(args);
  }
  async createFixedAsset(
    args: Prisma.FixedAssetCreateArgs
  ): Promise<PrismaFixedAsset> {
    return this.prisma.fixedAsset.create(args);
  }
  async updateFixedAsset(
    args: Prisma.FixedAssetUpdateArgs
  ): Promise<PrismaFixedAsset> {
    return this.prisma.fixedAsset.update(args);
  }
  async deleteFixedAsset(
    args: Prisma.FixedAssetDeleteArgs
  ): Promise<PrismaFixedAsset> {
    return this.prisma.fixedAsset.delete(args);
  }
}
