/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GeneralLedger } from "./GeneralLedger";
import { GeneralLedgerCountArgs } from "./GeneralLedgerCountArgs";
import { GeneralLedgerFindManyArgs } from "./GeneralLedgerFindManyArgs";
import { GeneralLedgerFindUniqueArgs } from "./GeneralLedgerFindUniqueArgs";
import { CreateGeneralLedgerArgs } from "./CreateGeneralLedgerArgs";
import { UpdateGeneralLedgerArgs } from "./UpdateGeneralLedgerArgs";
import { DeleteGeneralLedgerArgs } from "./DeleteGeneralLedgerArgs";
import { GeneralLedgerService } from "../generalLedger.service";
@graphql.Resolver(() => GeneralLedger)
export class GeneralLedgerResolverBase {
  constructor(protected readonly service: GeneralLedgerService) {}

  async _generalLedgersMeta(
    @graphql.Args() args: GeneralLedgerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GeneralLedger])
  async generalLedgers(
    @graphql.Args() args: GeneralLedgerFindManyArgs
  ): Promise<GeneralLedger[]> {
    return this.service.generalLedgers(args);
  }

  @graphql.Query(() => GeneralLedger, { nullable: true })
  async generalLedger(
    @graphql.Args() args: GeneralLedgerFindUniqueArgs
  ): Promise<GeneralLedger | null> {
    const result = await this.service.generalLedger(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GeneralLedger)
  async createGeneralLedger(
    @graphql.Args() args: CreateGeneralLedgerArgs
  ): Promise<GeneralLedger> {
    return await this.service.createGeneralLedger({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GeneralLedger)
  async updateGeneralLedger(
    @graphql.Args() args: UpdateGeneralLedgerArgs
  ): Promise<GeneralLedger | null> {
    try {
      return await this.service.updateGeneralLedger({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GeneralLedger)
  async deleteGeneralLedger(
    @graphql.Args() args: DeleteGeneralLedgerArgs
  ): Promise<GeneralLedger | null> {
    try {
      return await this.service.deleteGeneralLedger(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
