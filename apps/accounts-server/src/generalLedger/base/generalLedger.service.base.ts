/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GeneralLedger as PrismaGeneralLedger } from "@prisma/client";

export class GeneralLedgerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GeneralLedgerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.generalLedger.count(args);
  }

  async generalLedgers(
    args: Prisma.GeneralLedgerFindManyArgs
  ): Promise<PrismaGeneralLedger[]> {
    return this.prisma.generalLedger.findMany(args);
  }
  async generalLedger(
    args: Prisma.GeneralLedgerFindUniqueArgs
  ): Promise<PrismaGeneralLedger | null> {
    return this.prisma.generalLedger.findUnique(args);
  }
  async createGeneralLedger(
    args: Prisma.GeneralLedgerCreateArgs
  ): Promise<PrismaGeneralLedger> {
    return this.prisma.generalLedger.create(args);
  }
  async updateGeneralLedger(
    args: Prisma.GeneralLedgerUpdateArgs
  ): Promise<PrismaGeneralLedger> {
    return this.prisma.generalLedger.update(args);
  }
  async deleteGeneralLedger(
    args: Prisma.GeneralLedgerDeleteArgs
  ): Promise<PrismaGeneralLedger> {
    return this.prisma.generalLedger.delete(args);
  }
}
