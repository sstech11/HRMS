/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Benefit as PrismaBenefit,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class BenefitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BenefitCountArgs, "select">): Promise<number> {
    return this.prisma.benefit.count(args);
  }

  async benefits(args: Prisma.BenefitFindManyArgs): Promise<PrismaBenefit[]> {
    return this.prisma.benefit.findMany(args);
  }
  async benefit(
    args: Prisma.BenefitFindUniqueArgs
  ): Promise<PrismaBenefit | null> {
    return this.prisma.benefit.findUnique(args);
  }
  async createBenefit(args: Prisma.BenefitCreateArgs): Promise<PrismaBenefit> {
    return this.prisma.benefit.create(args);
  }
  async updateBenefit(args: Prisma.BenefitUpdateArgs): Promise<PrismaBenefit> {
    return this.prisma.benefit.update(args);
  }
  async deleteBenefit(args: Prisma.BenefitDeleteArgs): Promise<PrismaBenefit> {
    return this.prisma.benefit.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.benefit
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
