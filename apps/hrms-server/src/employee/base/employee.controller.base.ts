/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeService } from "../employee.service";
import { EmployeeCreateInput } from "./EmployeeCreateInput";
import { Employee } from "./Employee";
import { EmployeeFindManyArgs } from "./EmployeeFindManyArgs";
import { EmployeeWhereUniqueInput } from "./EmployeeWhereUniqueInput";
import { EmployeeUpdateInput } from "./EmployeeUpdateInput";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { AttendanceWhereUniqueInput } from "../../attendance/base/AttendanceWhereUniqueInput";
import { BenefitFindManyArgs } from "../../benefit/base/BenefitFindManyArgs";
import { Benefit } from "../../benefit/base/Benefit";
import { BenefitWhereUniqueInput } from "../../benefit/base/BenefitWhereUniqueInput";
import { LeaveFindManyArgs } from "../../leave/base/LeaveFindManyArgs";
import { Leave } from "../../leave/base/Leave";
import { LeaveWhereUniqueInput } from "../../leave/base/LeaveWhereUniqueInput";
import { PayrollFindManyArgs } from "../../payroll/base/PayrollFindManyArgs";
import { Payroll } from "../../payroll/base/Payroll";
import { PayrollWhereUniqueInput } from "../../payroll/base/PayrollWhereUniqueInput";
import { PerformanceFindManyArgs } from "../../performance/base/PerformanceFindManyArgs";
import { Performance } from "../../performance/base/Performance";
import { PerformanceWhereUniqueInput } from "../../performance/base/PerformanceWhereUniqueInput";
import { SelfServiceFindManyArgs } from "../../selfService/base/SelfServiceFindManyArgs";
import { SelfService } from "../../selfService/base/SelfService";
import { SelfServiceWhereUniqueInput } from "../../selfService/base/SelfServiceWhereUniqueInput";
import { TalentFindManyArgs } from "../../talent/base/TalentFindManyArgs";
import { Talent } from "../../talent/base/Talent";
import { TalentWhereUniqueInput } from "../../talent/base/TalentWhereUniqueInput";
import { WorkforceFindManyArgs } from "../../workforce/base/WorkforceFindManyArgs";
import { Workforce } from "../../workforce/base/Workforce";
import { WorkforceWhereUniqueInput } from "../../workforce/base/WorkforceWhereUniqueInput";

export class EmployeeControllerBase {
  constructor(protected readonly service: EmployeeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Employee })
  async createEmployee(
    @common.Body() data: EmployeeCreateInput
  ): Promise<Employee> {
    return await this.service.createEmployee({
      data: data,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        hireDate: true,
        id: true,
        lastName: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Employee] })
  @ApiNestedQuery(EmployeeFindManyArgs)
  async employees(@common.Req() request: Request): Promise<Employee[]> {
    const args = plainToClass(EmployeeFindManyArgs, request.query);
    return this.service.employees({
      ...args,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        hireDate: true,
        id: true,
        lastName: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employee(
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Employee | null> {
    const result = await this.service.employee({
      where: params,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        hireDate: true,
        id: true,
        lastName: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() data: EmployeeUpdateInput
  ): Promise<Employee | null> {
    try {
      return await this.service.updateEmployee({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateOfBirth: true,
          email: true,
          firstName: true,
          hireDate: true,
          id: true,
          lastName: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployee(
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Employee | null> {
    try {
      return await this.service.deleteEmployee({
        where: params,
        select: {
          createdAt: true,
          dateOfBirth: true,
          email: true,
          firstName: true,
          hireDate: true,
          id: true,
          lastName: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/attendances")
  @ApiNestedQuery(AttendanceFindManyArgs)
  async findAttendances(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Attendance[]> {
    const query = plainToClass(AttendanceFindManyArgs, request.query);
    const results = await this.service.findAttendances(params.id, {
      ...query,
      select: {
        checkInTime: true,
        checkOutTime: true,
        createdAt: true,
        date: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attendances")
  async connectAttendances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attendances")
  async updateAttendances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attendances")
  async disconnectAttendances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/benefits")
  @ApiNestedQuery(BenefitFindManyArgs)
  async findBenefits(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Benefit[]> {
    const query = plainToClass(BenefitFindManyArgs, request.query);
    const results = await this.service.findBenefits(params.id, {
      ...query,
      select: {
        benefitType: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/benefits")
  async connectBenefits(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: BenefitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      benefits: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/benefits")
  async updateBenefits(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: BenefitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      benefits: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/benefits")
  async disconnectBenefits(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: BenefitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      benefits: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/leaves")
  @ApiNestedQuery(LeaveFindManyArgs)
  async findLeaves(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Leave[]> {
    const query = plainToClass(LeaveFindManyArgs, request.query);
    const results = await this.service.findLeaves(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        leaveType: true,
        startDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leaves")
  async connectLeaves(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: LeaveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaves: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leaves")
  async updateLeaves(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: LeaveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaves: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leaves")
  async disconnectLeaves(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: LeaveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaves: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payrolls")
  @ApiNestedQuery(PayrollFindManyArgs)
  async findPayrolls(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Payroll[]> {
    const query = plainToClass(PayrollFindManyArgs, request.query);
    const results = await this.service.findPayrolls(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        payDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payrolls")
  async connectPayrolls(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrolls: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payrolls")
  async updatePayrolls(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrolls: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payrolls")
  async disconnectPayrolls(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrolls: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/performances")
  @ApiNestedQuery(PerformanceFindManyArgs)
  async findPerformances(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Performance[]> {
    const query = plainToClass(PerformanceFindManyArgs, request.query);
    const results = await this.service.findPerformances(params.id, {
      ...query,
      select: {
        comments: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        reviewDate: true,
        score: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/performances")
  async connectPerformances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PerformanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      performances: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/performances")
  async updatePerformances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PerformanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      performances: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/performances")
  async disconnectPerformances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PerformanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      performances: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/selfServices")
  @ApiNestedQuery(SelfServiceFindManyArgs)
  async findSelfServices(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<SelfService[]> {
    const query = plainToClass(SelfServiceFindManyArgs, request.query);
    const results = await this.service.findSelfServices(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        functionality: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/selfServices")
  async connectSelfServices(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: SelfServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      selfServices: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/selfServices")
  async updateSelfServices(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: SelfServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      selfServices: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/selfServices")
  async disconnectSelfServices(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: SelfServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      selfServices: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/talents")
  @ApiNestedQuery(TalentFindManyArgs)
  async findTalents(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Talent[]> {
    const query = plainToClass(TalentFindManyArgs, request.query);
    const results = await this.service.findTalents(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        goal: true,
        id: true,
        position: true,
        potential: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/talents")
  async connectTalents(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TalentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      talents: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/talents")
  async updateTalents(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TalentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      talents: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/talents")
  async disconnectTalents(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TalentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      talents: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/workforces")
  @ApiNestedQuery(WorkforceFindManyArgs)
  async findWorkforces(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Workforce[]> {
    const query = plainToClass(WorkforceFindManyArgs, request.query);
    const results = await this.service.findWorkforces(params.id, {
      ...query,
      select: {
        budget: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        schedule: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workforces")
  async connectWorkforces(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: WorkforceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workforces: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workforces")
  async updateWorkforces(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: WorkforceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workforces: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workforces")
  async disconnectWorkforces(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: WorkforceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workforces: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }
}
