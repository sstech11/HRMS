/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EmployeeService } from "../employee.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EmployeeCreateInput } from "./EmployeeCreateInput";
import { Employee } from "./Employee";
import { EmployeeFindManyArgs } from "./EmployeeFindManyArgs";
import { EmployeeWhereUniqueInput } from "./EmployeeWhereUniqueInput";
import { EmployeeUpdateInput } from "./EmployeeUpdateInput";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { AttendanceWhereUniqueInput } from "../../attendance/base/AttendanceWhereUniqueInput";
import { BenefitFindManyArgs } from "../../benefit/base/BenefitFindManyArgs";
import { Benefit } from "../../benefit/base/Benefit";
import { BenefitWhereUniqueInput } from "../../benefit/base/BenefitWhereUniqueInput";
import { LeaveFindManyArgs } from "../../leave/base/LeaveFindManyArgs";
import { Leave } from "../../leave/base/Leave";
import { LeaveWhereUniqueInput } from "../../leave/base/LeaveWhereUniqueInput";
import { PayrollFindManyArgs } from "../../payroll/base/PayrollFindManyArgs";
import { Payroll } from "../../payroll/base/Payroll";
import { PayrollWhereUniqueInput } from "../../payroll/base/PayrollWhereUniqueInput";
import { PerformanceFindManyArgs } from "../../performance/base/PerformanceFindManyArgs";
import { Performance } from "../../performance/base/Performance";
import { PerformanceWhereUniqueInput } from "../../performance/base/PerformanceWhereUniqueInput";
import { SelfServiceFindManyArgs } from "../../selfService/base/SelfServiceFindManyArgs";
import { SelfService } from "../../selfService/base/SelfService";
import { SelfServiceWhereUniqueInput } from "../../selfService/base/SelfServiceWhereUniqueInput";
import { TalentFindManyArgs } from "../../talent/base/TalentFindManyArgs";
import { Talent } from "../../talent/base/Talent";
import { TalentWhereUniqueInput } from "../../talent/base/TalentWhereUniqueInput";
import { WorkforceFindManyArgs } from "../../workforce/base/WorkforceFindManyArgs";
import { Workforce } from "../../workforce/base/Workforce";
import { WorkforceWhereUniqueInput } from "../../workforce/base/WorkforceWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EmployeeControllerBase {
  constructor(
    protected readonly service: EmployeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Employee })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: EmployeeCreateInput,
  })
  async createEmployee(
    @common.Body() data: EmployeeCreateInput
  ): Promise<Employee> {
    return await this.service.createEmployee({
      data: data,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        hireDate: true,
        id: true,
        lastName: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Employee] })
  @ApiNestedQuery(EmployeeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employees(@common.Req() request: Request): Promise<Employee[]> {
    const args = plainToClass(EmployeeFindManyArgs, request.query);
    return this.service.employees({
      ...args,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        hireDate: true,
        id: true,
        lastName: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employee(
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Employee | null> {
    const result = await this.service.employee({
      where: params,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        hireDate: true,
        id: true,
        lastName: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: EmployeeUpdateInput,
  })
  async updateEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() data: EmployeeUpdateInput
  ): Promise<Employee | null> {
    try {
      return await this.service.updateEmployee({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateOfBirth: true,
          email: true,
          firstName: true,
          hireDate: true,
          id: true,
          lastName: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEmployee(
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Employee | null> {
    try {
      return await this.service.deleteEmployee({
        where: params,
        select: {
          createdAt: true,
          dateOfBirth: true,
          email: true,
          firstName: true,
          hireDate: true,
          id: true,
          lastName: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attendances")
  @ApiNestedQuery(AttendanceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Attendance",
    action: "read",
    possession: "any",
  })
  async findAttendances(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Attendance[]> {
    const query = plainToClass(AttendanceFindManyArgs, request.query);
    const results = await this.service.findAttendances(params.id, {
      ...query,
      select: {
        checkInTime: true,
        checkOutTime: true,
        createdAt: true,
        date: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attendances")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async connectAttendances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attendances")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async updateAttendances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attendances")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async disconnectAttendances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/benefits")
  @ApiNestedQuery(BenefitFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Benefit",
    action: "read",
    possession: "any",
  })
  async findBenefits(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Benefit[]> {
    const query = plainToClass(BenefitFindManyArgs, request.query);
    const results = await this.service.findBenefits(params.id, {
      ...query,
      select: {
        benefitType: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/benefits")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async connectBenefits(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: BenefitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      benefits: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/benefits")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async updateBenefits(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: BenefitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      benefits: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/benefits")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async disconnectBenefits(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: BenefitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      benefits: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/leaves")
  @ApiNestedQuery(LeaveFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Leave",
    action: "read",
    possession: "any",
  })
  async findLeaves(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Leave[]> {
    const query = plainToClass(LeaveFindManyArgs, request.query);
    const results = await this.service.findLeaves(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        leaveType: true,
        startDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leaves")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async connectLeaves(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: LeaveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaves: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leaves")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async updateLeaves(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: LeaveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaves: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leaves")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async disconnectLeaves(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: LeaveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaves: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payrolls")
  @ApiNestedQuery(PayrollFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payroll",
    action: "read",
    possession: "any",
  })
  async findPayrolls(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Payroll[]> {
    const query = plainToClass(PayrollFindManyArgs, request.query);
    const results = await this.service.findPayrolls(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        payDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payrolls")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async connectPayrolls(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrolls: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payrolls")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async updatePayrolls(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrolls: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payrolls")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async disconnectPayrolls(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrolls: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/performances")
  @ApiNestedQuery(PerformanceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Performance",
    action: "read",
    possession: "any",
  })
  async findPerformances(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Performance[]> {
    const query = plainToClass(PerformanceFindManyArgs, request.query);
    const results = await this.service.findPerformances(params.id, {
      ...query,
      select: {
        comments: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        reviewDate: true,
        score: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/performances")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async connectPerformances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PerformanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      performances: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/performances")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async updatePerformances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PerformanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      performances: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/performances")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async disconnectPerformances(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: PerformanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      performances: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/selfServices")
  @ApiNestedQuery(SelfServiceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SelfService",
    action: "read",
    possession: "any",
  })
  async findSelfServices(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<SelfService[]> {
    const query = plainToClass(SelfServiceFindManyArgs, request.query);
    const results = await this.service.findSelfServices(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        functionality: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/selfServices")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async connectSelfServices(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: SelfServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      selfServices: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/selfServices")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async updateSelfServices(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: SelfServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      selfServices: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/selfServices")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async disconnectSelfServices(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: SelfServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      selfServices: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/talents")
  @ApiNestedQuery(TalentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Talent",
    action: "read",
    possession: "any",
  })
  async findTalents(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Talent[]> {
    const query = plainToClass(TalentFindManyArgs, request.query);
    const results = await this.service.findTalents(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        goal: true,
        id: true,
        position: true,
        potential: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/talents")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async connectTalents(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TalentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      talents: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/talents")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async updateTalents(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TalentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      talents: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/talents")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async disconnectTalents(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: TalentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      talents: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/workforces")
  @ApiNestedQuery(WorkforceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Workforce",
    action: "read",
    possession: "any",
  })
  async findWorkforces(
    @common.Req() request: Request,
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Workforce[]> {
    const query = plainToClass(WorkforceFindManyArgs, request.query);
    const results = await this.service.findWorkforces(params.id, {
      ...query,
      select: {
        budget: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        schedule: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workforces")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async connectWorkforces(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: WorkforceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workforces: {
        connect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workforces")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async updateWorkforces(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: WorkforceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workforces: {
        set: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workforces")
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async disconnectWorkforces(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() body: WorkforceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workforces: {
        disconnect: body,
      },
    };
    await this.service.updateEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }
}
