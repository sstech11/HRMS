/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Employee as PrismaEmployee,
  Attendance as PrismaAttendance,
  Benefit as PrismaBenefit,
  Leave as PrismaLeave,
  Payroll as PrismaPayroll,
  Performance as PrismaPerformance,
  SelfService as PrismaSelfService,
  Talent as PrismaTalent,
  Workforce as PrismaWorkforce,
} from "@prisma/client";

export class EmployeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EmployeeCountArgs, "select">): Promise<number> {
    return this.prisma.employee.count(args);
  }

  async employees(
    args: Prisma.EmployeeFindManyArgs
  ): Promise<PrismaEmployee[]> {
    return this.prisma.employee.findMany(args);
  }
  async employee(
    args: Prisma.EmployeeFindUniqueArgs
  ): Promise<PrismaEmployee | null> {
    return this.prisma.employee.findUnique(args);
  }
  async createEmployee(
    args: Prisma.EmployeeCreateArgs
  ): Promise<PrismaEmployee> {
    return this.prisma.employee.create(args);
  }
  async updateEmployee(
    args: Prisma.EmployeeUpdateArgs
  ): Promise<PrismaEmployee> {
    return this.prisma.employee.update(args);
  }
  async deleteEmployee(
    args: Prisma.EmployeeDeleteArgs
  ): Promise<PrismaEmployee> {
    return this.prisma.employee.delete(args);
  }

  async findAttendances(
    parentId: string,
    args: Prisma.AttendanceFindManyArgs
  ): Promise<PrismaAttendance[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attendances(args);
  }

  async findBenefits(
    parentId: string,
    args: Prisma.BenefitFindManyArgs
  ): Promise<PrismaBenefit[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .benefits(args);
  }

  async findLeaves(
    parentId: string,
    args: Prisma.LeaveFindManyArgs
  ): Promise<PrismaLeave[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .leaves(args);
  }

  async findPayrolls(
    parentId: string,
    args: Prisma.PayrollFindManyArgs
  ): Promise<PrismaPayroll[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payrolls(args);
  }

  async findPerformances(
    parentId: string,
    args: Prisma.PerformanceFindManyArgs
  ): Promise<PrismaPerformance[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .performances(args);
  }

  async findSelfServices(
    parentId: string,
    args: Prisma.SelfServiceFindManyArgs
  ): Promise<PrismaSelfService[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .selfServices(args);
  }

  async findTalents(
    parentId: string,
    args: Prisma.TalentFindManyArgs
  ): Promise<PrismaTalent[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .talents(args);
  }

  async findWorkforces(
    parentId: string,
    args: Prisma.WorkforceFindManyArgs
  ): Promise<PrismaWorkforce[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workforces(args);
  }
}
