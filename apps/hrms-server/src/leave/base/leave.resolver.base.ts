/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Leave } from "./Leave";
import { LeaveCountArgs } from "./LeaveCountArgs";
import { LeaveFindManyArgs } from "./LeaveFindManyArgs";
import { LeaveFindUniqueArgs } from "./LeaveFindUniqueArgs";
import { CreateLeaveArgs } from "./CreateLeaveArgs";
import { UpdateLeaveArgs } from "./UpdateLeaveArgs";
import { DeleteLeaveArgs } from "./DeleteLeaveArgs";
import { Employee } from "../../employee/base/Employee";
import { LeaveService } from "../leave.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Leave)
export class LeaveResolverBase {
  constructor(
    protected readonly service: LeaveService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Leave",
    action: "read",
    possession: "any",
  })
  async _leavesMeta(
    @graphql.Args() args: LeaveCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Leave])
  @nestAccessControl.UseRoles({
    resource: "Leave",
    action: "read",
    possession: "any",
  })
  async leaves(@graphql.Args() args: LeaveFindManyArgs): Promise<Leave[]> {
    return this.service.leaves(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Leave, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Leave",
    action: "read",
    possession: "own",
  })
  async leave(
    @graphql.Args() args: LeaveFindUniqueArgs
  ): Promise<Leave | null> {
    const result = await this.service.leave(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Leave)
  @nestAccessControl.UseRoles({
    resource: "Leave",
    action: "create",
    possession: "any",
  })
  async createLeave(@graphql.Args() args: CreateLeaveArgs): Promise<Leave> {
    return await this.service.createLeave({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Leave)
  @nestAccessControl.UseRoles({
    resource: "Leave",
    action: "update",
    possession: "any",
  })
  async updateLeave(
    @graphql.Args() args: UpdateLeaveArgs
  ): Promise<Leave | null> {
    try {
      return await this.service.updateLeave({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Leave)
  @nestAccessControl.UseRoles({
    resource: "Leave",
    action: "delete",
    possession: "any",
  })
  async deleteLeave(
    @graphql.Args() args: DeleteLeaveArgs
  ): Promise<Leave | null> {
    try {
      return await this.service.deleteLeave(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(@graphql.Parent() parent: Leave): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
