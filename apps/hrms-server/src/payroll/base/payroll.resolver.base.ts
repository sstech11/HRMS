/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Payroll } from "./Payroll";
import { PayrollCountArgs } from "./PayrollCountArgs";
import { PayrollFindManyArgs } from "./PayrollFindManyArgs";
import { PayrollFindUniqueArgs } from "./PayrollFindUniqueArgs";
import { CreatePayrollArgs } from "./CreatePayrollArgs";
import { UpdatePayrollArgs } from "./UpdatePayrollArgs";
import { DeletePayrollArgs } from "./DeletePayrollArgs";
import { Employee } from "../../employee/base/Employee";
import { PayrollService } from "../payroll.service";
@graphql.Resolver(() => Payroll)
export class PayrollResolverBase {
  constructor(protected readonly service: PayrollService) {}

  async _payrollsMeta(
    @graphql.Args() args: PayrollCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Payroll])
  async payrolls(
    @graphql.Args() args: PayrollFindManyArgs
  ): Promise<Payroll[]> {
    return this.service.payrolls(args);
  }

  @graphql.Query(() => Payroll, { nullable: true })
  async payroll(
    @graphql.Args() args: PayrollFindUniqueArgs
  ): Promise<Payroll | null> {
    const result = await this.service.payroll(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Payroll)
  async createPayroll(
    @graphql.Args() args: CreatePayrollArgs
  ): Promise<Payroll> {
    return await this.service.createPayroll({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Payroll)
  async updatePayroll(
    @graphql.Args() args: UpdatePayrollArgs
  ): Promise<Payroll | null> {
    try {
      return await this.service.updatePayroll({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Payroll)
  async deletePayroll(
    @graphql.Args() args: DeletePayrollArgs
  ): Promise<Payroll | null> {
    try {
      return await this.service.deletePayroll(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: Payroll
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
