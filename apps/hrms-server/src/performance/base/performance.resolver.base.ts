/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Performance } from "./Performance";
import { PerformanceCountArgs } from "./PerformanceCountArgs";
import { PerformanceFindManyArgs } from "./PerformanceFindManyArgs";
import { PerformanceFindUniqueArgs } from "./PerformanceFindUniqueArgs";
import { CreatePerformanceArgs } from "./CreatePerformanceArgs";
import { UpdatePerformanceArgs } from "./UpdatePerformanceArgs";
import { DeletePerformanceArgs } from "./DeletePerformanceArgs";
import { Employee } from "../../employee/base/Employee";
import { PerformanceService } from "../performance.service";
@graphql.Resolver(() => Performance)
export class PerformanceResolverBase {
  constructor(protected readonly service: PerformanceService) {}

  async _performancesMeta(
    @graphql.Args() args: PerformanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Performance])
  async performances(
    @graphql.Args() args: PerformanceFindManyArgs
  ): Promise<Performance[]> {
    return this.service.performances(args);
  }

  @graphql.Query(() => Performance, { nullable: true })
  async performance(
    @graphql.Args() args: PerformanceFindUniqueArgs
  ): Promise<Performance | null> {
    const result = await this.service.performance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Performance)
  async createPerformance(
    @graphql.Args() args: CreatePerformanceArgs
  ): Promise<Performance> {
    return await this.service.createPerformance({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Performance)
  async updatePerformance(
    @graphql.Args() args: UpdatePerformanceArgs
  ): Promise<Performance | null> {
    try {
      return await this.service.updatePerformance({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Performance)
  async deletePerformance(
    @graphql.Args() args: DeletePerformanceArgs
  ): Promise<Performance | null> {
    try {
      return await this.service.deletePerformance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: Performance
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
