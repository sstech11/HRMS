/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Performance as PrismaPerformance,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class PerformanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PerformanceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.performance.count(args);
  }

  async performances(
    args: Prisma.PerformanceFindManyArgs
  ): Promise<PrismaPerformance[]> {
    return this.prisma.performance.findMany(args);
  }
  async performance(
    args: Prisma.PerformanceFindUniqueArgs
  ): Promise<PrismaPerformance | null> {
    return this.prisma.performance.findUnique(args);
  }
  async createPerformance(
    args: Prisma.PerformanceCreateArgs
  ): Promise<PrismaPerformance> {
    return this.prisma.performance.create(args);
  }
  async updatePerformance(
    args: Prisma.PerformanceUpdateArgs
  ): Promise<PrismaPerformance> {
    return this.prisma.performance.update(args);
  }
  async deletePerformance(
    args: Prisma.PerformanceDeleteArgs
  ): Promise<PrismaPerformance> {
    return this.prisma.performance.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.performance
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
