/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SelfService } from "./SelfService";
import { SelfServiceCountArgs } from "./SelfServiceCountArgs";
import { SelfServiceFindManyArgs } from "./SelfServiceFindManyArgs";
import { SelfServiceFindUniqueArgs } from "./SelfServiceFindUniqueArgs";
import { CreateSelfServiceArgs } from "./CreateSelfServiceArgs";
import { UpdateSelfServiceArgs } from "./UpdateSelfServiceArgs";
import { DeleteSelfServiceArgs } from "./DeleteSelfServiceArgs";
import { Employee } from "../../employee/base/Employee";
import { SelfServiceService } from "../selfService.service";
@graphql.Resolver(() => SelfService)
export class SelfServiceResolverBase {
  constructor(protected readonly service: SelfServiceService) {}

  async _selfServicesMeta(
    @graphql.Args() args: SelfServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SelfService])
  async selfServices(
    @graphql.Args() args: SelfServiceFindManyArgs
  ): Promise<SelfService[]> {
    return this.service.selfServices(args);
  }

  @graphql.Query(() => SelfService, { nullable: true })
  async selfService(
    @graphql.Args() args: SelfServiceFindUniqueArgs
  ): Promise<SelfService | null> {
    const result = await this.service.selfService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SelfService)
  async createSelfService(
    @graphql.Args() args: CreateSelfServiceArgs
  ): Promise<SelfService> {
    return await this.service.createSelfService({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SelfService)
  async updateSelfService(
    @graphql.Args() args: UpdateSelfServiceArgs
  ): Promise<SelfService | null> {
    try {
      return await this.service.updateSelfService({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SelfService)
  async deleteSelfService(
    @graphql.Args() args: DeleteSelfServiceArgs
  ): Promise<SelfService | null> {
    try {
      return await this.service.deleteSelfService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: SelfService
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
