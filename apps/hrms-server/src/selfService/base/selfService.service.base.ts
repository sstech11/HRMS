/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SelfService as PrismaSelfService,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class SelfServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SelfServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.selfService.count(args);
  }

  async selfServices(
    args: Prisma.SelfServiceFindManyArgs
  ): Promise<PrismaSelfService[]> {
    return this.prisma.selfService.findMany(args);
  }
  async selfService(
    args: Prisma.SelfServiceFindUniqueArgs
  ): Promise<PrismaSelfService | null> {
    return this.prisma.selfService.findUnique(args);
  }
  async createSelfService(
    args: Prisma.SelfServiceCreateArgs
  ): Promise<PrismaSelfService> {
    return this.prisma.selfService.create(args);
  }
  async updateSelfService(
    args: Prisma.SelfServiceUpdateArgs
  ): Promise<PrismaSelfService> {
    return this.prisma.selfService.update(args);
  }
  async deleteSelfService(
    args: Prisma.SelfServiceDeleteArgs
  ): Promise<PrismaSelfService> {
    return this.prisma.selfService.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.selfService
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
