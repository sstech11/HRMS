/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Talent } from "./Talent";
import { TalentCountArgs } from "./TalentCountArgs";
import { TalentFindManyArgs } from "./TalentFindManyArgs";
import { TalentFindUniqueArgs } from "./TalentFindUniqueArgs";
import { CreateTalentArgs } from "./CreateTalentArgs";
import { UpdateTalentArgs } from "./UpdateTalentArgs";
import { DeleteTalentArgs } from "./DeleteTalentArgs";
import { Employee } from "../../employee/base/Employee";
import { TalentService } from "../talent.service";
@graphql.Resolver(() => Talent)
export class TalentResolverBase {
  constructor(protected readonly service: TalentService) {}

  async _talentsMeta(
    @graphql.Args() args: TalentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Talent])
  async talents(@graphql.Args() args: TalentFindManyArgs): Promise<Talent[]> {
    return this.service.talents(args);
  }

  @graphql.Query(() => Talent, { nullable: true })
  async talent(
    @graphql.Args() args: TalentFindUniqueArgs
  ): Promise<Talent | null> {
    const result = await this.service.talent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Talent)
  async createTalent(@graphql.Args() args: CreateTalentArgs): Promise<Talent> {
    return await this.service.createTalent({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Talent)
  async updateTalent(
    @graphql.Args() args: UpdateTalentArgs
  ): Promise<Talent | null> {
    try {
      return await this.service.updateTalent({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Talent)
  async deleteTalent(
    @graphql.Args() args: DeleteTalentArgs
  ): Promise<Talent | null> {
    try {
      return await this.service.deleteTalent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: Talent
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
