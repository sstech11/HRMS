/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Talent as PrismaTalent,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class TalentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TalentCountArgs, "select">): Promise<number> {
    return this.prisma.talent.count(args);
  }

  async talents(args: Prisma.TalentFindManyArgs): Promise<PrismaTalent[]> {
    return this.prisma.talent.findMany(args);
  }
  async talent(
    args: Prisma.TalentFindUniqueArgs
  ): Promise<PrismaTalent | null> {
    return this.prisma.talent.findUnique(args);
  }
  async createTalent(args: Prisma.TalentCreateArgs): Promise<PrismaTalent> {
    return this.prisma.talent.create(args);
  }
  async updateTalent(args: Prisma.TalentUpdateArgs): Promise<PrismaTalent> {
    return this.prisma.talent.update(args);
  }
  async deleteTalent(args: Prisma.TalentDeleteArgs): Promise<PrismaTalent> {
    return this.prisma.talent.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.talent
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
