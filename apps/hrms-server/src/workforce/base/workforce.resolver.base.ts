/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Workforce } from "./Workforce";
import { WorkforceCountArgs } from "./WorkforceCountArgs";
import { WorkforceFindManyArgs } from "./WorkforceFindManyArgs";
import { WorkforceFindUniqueArgs } from "./WorkforceFindUniqueArgs";
import { CreateWorkforceArgs } from "./CreateWorkforceArgs";
import { UpdateWorkforceArgs } from "./UpdateWorkforceArgs";
import { DeleteWorkforceArgs } from "./DeleteWorkforceArgs";
import { Employee } from "../../employee/base/Employee";
import { WorkforceService } from "../workforce.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Workforce)
export class WorkforceResolverBase {
  constructor(
    protected readonly service: WorkforceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Workforce",
    action: "read",
    possession: "any",
  })
  async _workforcesMeta(
    @graphql.Args() args: WorkforceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Workforce])
  @nestAccessControl.UseRoles({
    resource: "Workforce",
    action: "read",
    possession: "any",
  })
  async workforces(
    @graphql.Args() args: WorkforceFindManyArgs
  ): Promise<Workforce[]> {
    return this.service.workforces(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Workforce, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Workforce",
    action: "read",
    possession: "own",
  })
  async workforce(
    @graphql.Args() args: WorkforceFindUniqueArgs
  ): Promise<Workforce | null> {
    const result = await this.service.workforce(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Workforce)
  @nestAccessControl.UseRoles({
    resource: "Workforce",
    action: "create",
    possession: "any",
  })
  async createWorkforce(
    @graphql.Args() args: CreateWorkforceArgs
  ): Promise<Workforce> {
    return await this.service.createWorkforce({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Workforce)
  @nestAccessControl.UseRoles({
    resource: "Workforce",
    action: "update",
    possession: "any",
  })
  async updateWorkforce(
    @graphql.Args() args: UpdateWorkforceArgs
  ): Promise<Workforce | null> {
    try {
      return await this.service.updateWorkforce({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Workforce)
  @nestAccessControl.UseRoles({
    resource: "Workforce",
    action: "delete",
    possession: "any",
  })
  async deleteWorkforce(
    @graphql.Args() args: DeleteWorkforceArgs
  ): Promise<Workforce | null> {
    try {
      return await this.service.deleteWorkforce(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: Workforce
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
