/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Workforce as PrismaWorkforce,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class WorkforceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkforceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workforce.count(args);
  }

  async workforces(
    args: Prisma.WorkforceFindManyArgs
  ): Promise<PrismaWorkforce[]> {
    return this.prisma.workforce.findMany(args);
  }
  async workforce(
    args: Prisma.WorkforceFindUniqueArgs
  ): Promise<PrismaWorkforce | null> {
    return this.prisma.workforce.findUnique(args);
  }
  async createWorkforce(
    args: Prisma.WorkforceCreateArgs
  ): Promise<PrismaWorkforce> {
    return this.prisma.workforce.create(args);
  }
  async updateWorkforce(
    args: Prisma.WorkforceUpdateArgs
  ): Promise<PrismaWorkforce> {
    return this.prisma.workforce.update(args);
  }
  async deleteWorkforce(
    args: Prisma.WorkforceDeleteArgs
  ): Promise<PrismaWorkforce> {
    return this.prisma.workforce.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.workforce
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
